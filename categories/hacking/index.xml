<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Hacking on Favas M</title><link>https://favas.dev/categories/hacking/</link><description>Recent content in Hacking on Favas M</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sun, 06 Oct 2024 09:25:54 +0530</lastBuildDate><atom:link href="https://favas.dev/categories/hacking/index.xml" rel="self" type="application/rss+xml"/><item><title>Photon Lockdown Walkthrough - HackTheBox</title><link>https://favas.dev/blogs/hackthebox/challenges/hardware/photon_lockdown/</link><pubDate>Sun, 06 Oct 2024 09:25:54 +0530</pubDate><guid>https://favas.dev/blogs/hackthebox/challenges/hardware/photon_lockdown/</guid><description>&lt;p>In this article, I’ll walk you through solving the &lt;strong>Photon Lockdown&lt;/strong> hardware challenge from the platform &lt;a href="https://hackthebox.eu">HackTheBox&lt;/a>.&lt;/p>
&lt;p>Challenge description is the following block of text:&lt;/p>
&lt;blockquote>
&lt;p>We&amp;rsquo;ve located the adversary&amp;rsquo;s location and must now secure access to their Optical Network Terminal to disable their internet connection. Fortunately, we&amp;rsquo;ve obtained a copy of the device&amp;rsquo;s firmware, which is suspected to contain hardcoded credentials. Can you extract the password from it?&lt;/p>
&lt;/blockquote>
&lt;p>The objective seems to be find some hard-coded credentials hidden in these files. I downloaded the challenge files, which seem to be firmware files according to the description.&lt;/p></description><content>&lt;p>In this article, I’ll walk you through solving the &lt;strong>Photon Lockdown&lt;/strong> hardware challenge from the platform &lt;a href="https://hackthebox.eu">HackTheBox&lt;/a>.&lt;/p>
&lt;p>Challenge description is the following block of text:&lt;/p>
&lt;blockquote>
&lt;p>We&amp;rsquo;ve located the adversary&amp;rsquo;s location and must now secure access to their Optical Network Terminal to disable their internet connection. Fortunately, we&amp;rsquo;ve obtained a copy of the device&amp;rsquo;s firmware, which is suspected to contain hardcoded credentials. Can you extract the password from it?&lt;/p>
&lt;/blockquote>
&lt;p>The objective seems to be find some hard-coded credentials hidden in these files. I downloaded the challenge files, which seem to be firmware files according to the description.&lt;/p>
&lt;p>The challenge file contains a single zip named &amp;lsquo;Photon Lockdown.zip&amp;rsquo;. When I extracted it using &lt;code>unzip 'Photon Lockdown.zip'&lt;/code>, it revealed a directory named &lt;strong>ONT&lt;/strong> with three files in it:&lt;/p>
&lt;ul>
&lt;li>&lt;em>fwu_ver&lt;/em>&lt;/li>
&lt;li>&lt;em>hw_ver&lt;/em>&lt;/li>
&lt;li>&lt;em>rootfs&lt;/em>&lt;/li>
&lt;/ul>
&lt;p>First, I checked what these files contained. The &lt;em>fwu_ver&lt;/em> file had raw text data: &lt;strong>3.0.5&lt;/strong>. Based on the file name and the content, it&amp;rsquo;s safe to assume this might be the firmware version.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ file fwu_ver
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> fwu_ver: ASCII text
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ cat fwu_ver
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 3.0.5
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The second file, &lt;em>hw_ver&lt;/em>, seemed to contain some kind of archived data. So, I thought, why not try to extract it? But I couldn’t. That’s when I decided to check the file size, and to my surprise, it was only 3 bytes. This means it likely isn’t an archive, or there’s nothing useful inside. Still, I ran the &lt;code>cat&lt;/code> command on the file just to be sure, and it returned a simple string: &amp;ldquo;X1&amp;rdquo; and nothing else. We can safely assume this represents some kind of hardware version.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ file hw_ver
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> hw_ver: X1 archive data
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ ls -la
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .rw-r--r-- &lt;span style="color:#ae81ff">6&lt;/span> clevrf0x &lt;span style="color:#ae81ff">11&lt;/span> Oct &lt;span style="color:#ae81ff">2023&lt;/span> fwu_ver
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .rw-r--r-- &lt;span style="color:#ae81ff">3&lt;/span> clevrf0x &lt;span style="color:#ae81ff">11&lt;/span> Oct &lt;span style="color:#ae81ff">2023&lt;/span> hw_ver
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .rw-r--r-- 11M clevrf0x &lt;span style="color:#ae81ff">1&lt;/span> Oct &lt;span style="color:#ae81ff">2023&lt;/span> rootfs
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ cat hw_ver
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> X1
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The final file is called &lt;em>rootfs&lt;/em>, and from the name, we can guess it’s the firmware’s root file system. To confirm, I ran the &lt;code>file&lt;/code> command, which backed up my suspicion.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ file rootfs
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> rootfs: Squashfs filesystem, little endian, version 4.0, zlib compressed, &lt;span style="color:#ae81ff">10936182&lt;/span> bytes, &lt;span style="color:#ae81ff">910&lt;/span> inodes, blocksize: &lt;span style="color:#ae81ff">1310&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">72&lt;/span> bytes, created: Sun Oct &lt;span style="color:#ae81ff">1&lt;/span> 07:02:43 &lt;span style="color:#ae81ff">2023&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The next step is to mount the file system and explore its contents. Let’s create a temporary directory to mount the file system, and then proceed with mounting it.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ mkdir fw_fs
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ sudo mount rootfs ./fw_fs
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Let’s &lt;code>cd&lt;/code> into the newly mounted directory and check what it contains.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ ls -la
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .rw-rw-r-- &lt;span style="color:#ae81ff">0&lt;/span> root &lt;span style="color:#ae81ff">10&lt;/span> Aug &lt;span style="color:#ae81ff">2022&lt;/span> .lstripped
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> drwxrwxr-x - root &lt;span style="color:#ae81ff">10&lt;/span> Aug &lt;span style="color:#ae81ff">2022&lt;/span> bin
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> lrwxrwxrwx - root &lt;span style="color:#ae81ff">10&lt;/span> Aug &lt;span style="color:#ae81ff">2022&lt;/span> config -&amp;gt; ./var/config/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> drwxrwxr-x - root &lt;span style="color:#ae81ff">10&lt;/span> Aug &lt;span style="color:#ae81ff">2022&lt;/span> dev
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> drwxrwxr-x - root &lt;span style="color:#ae81ff">1&lt;/span> Oct &lt;span style="color:#ae81ff">2023&lt;/span> etc
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> drwxrwxr-x - root &lt;span style="color:#ae81ff">1&lt;/span> Oct &lt;span style="color:#ae81ff">2023&lt;/span> home
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> drwxrwxr-x - root &lt;span style="color:#ae81ff">1&lt;/span> Oct &lt;span style="color:#ae81ff">2023&lt;/span> image
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> drwxrwxr-x - root &lt;span style="color:#ae81ff">10&lt;/span> Aug &lt;span style="color:#ae81ff">2022&lt;/span> lib
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> lrwxrwxrwx - root &lt;span style="color:#ae81ff">10&lt;/span> Aug &lt;span style="color:#ae81ff">2022&lt;/span> mnt -&amp;gt; /var/mnt
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> drwxrwxr-x - root &lt;span style="color:#ae81ff">10&lt;/span> Aug &lt;span style="color:#ae81ff">2022&lt;/span> overlay
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> drwxrwxr-x - root &lt;span style="color:#ae81ff">10&lt;/span> Aug &lt;span style="color:#ae81ff">2022&lt;/span> proc
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> drwxrwxr-x - root &lt;span style="color:#ae81ff">10&lt;/span> Aug &lt;span style="color:#ae81ff">2022&lt;/span> run
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> lrwxrwxrwx - root &lt;span style="color:#ae81ff">10&lt;/span> Aug &lt;span style="color:#ae81ff">2022&lt;/span> sbin -&amp;gt; /bin
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> drwxrwxr-x - root &lt;span style="color:#ae81ff">10&lt;/span> Aug &lt;span style="color:#ae81ff">2022&lt;/span> sys
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> lrwxrwxrwx - root &lt;span style="color:#ae81ff">10&lt;/span> Aug &lt;span style="color:#ae81ff">2022&lt;/span> tmp -&amp;gt; /var/tmp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> drwxrwxr-x - root &lt;span style="color:#ae81ff">10&lt;/span> Aug &lt;span style="color:#ae81ff">2022&lt;/span> usr
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> drwxrwxr-x - root &lt;span style="color:#ae81ff">10&lt;/span> Aug &lt;span style="color:#ae81ff">2022&lt;/span> var
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>As you can see, there’s a &lt;em>config&lt;/em> file symlinked to &lt;em>./var/config/&lt;/em>, so I initially tried exploring that. However, the symlink was broken, and the &lt;em>/var&lt;/em> directory was empty. Then, I noticed the &lt;em>/home&lt;/em> directory and checked if it contained anything useful. It did, in fact, have a hidden directory with a file inside. I quickly read through it, but it didn’t contain the flag. However, it did have a string: &amp;ldquo;almost there,&amp;rdquo; which means we’re on the right track.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ ls -la home
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> drwxr-xr-x - root &lt;span style="color:#ae81ff">1&lt;/span> Oct &lt;span style="color:#ae81ff">2023&lt;/span> .41fr3d0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ ls -la home/.41fr3d0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .rw-r--r-- &lt;span style="color:#ae81ff">13&lt;/span> root &lt;span style="color:#ae81ff">1&lt;/span> Oct &lt;span style="color:#ae81ff">2023&lt;/span> s.txt
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ cat home/41fr3d0/s.txt
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> almost there
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>So where could the flag be? I then looked into the &lt;em>etc&lt;/em> directory since that&amp;rsquo;s where Unix/Linux-based systems generally store application-specific config files. I found an interesting file there. Remember the broken &lt;em>config&lt;/em> file located in the root directory? The &lt;em>etc&lt;/em> directory also had a &lt;em>config&lt;/em> file, along with a &lt;em>config_default.xml&lt;/em>. That looked promising, so I opened it in &lt;code>vim&lt;/code> and searched for anything related to the flag. It contained a lot of application-specific config options, including hard-coded credentials.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ ls -la etc
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> lrwxrwxrwx - root &lt;span style="color:#ae81ff">10&lt;/span> Aug &lt;span style="color:#ae81ff">2022&lt;/span> config -&amp;gt; /var/config
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .rwxrwxr-x 51k root &lt;span style="color:#ae81ff">1&lt;/span> Oct &lt;span style="color:#ae81ff">2023&lt;/span> config_default.xml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .rwxrwxr-x &lt;span style="color:#ae81ff">185&lt;/span> root &lt;span style="color:#ae81ff">10&lt;/span> Aug &lt;span style="color:#ae81ff">2022&lt;/span> config_default_hs.xml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> drwxrwxr-x - root &lt;span style="color:#ae81ff">10&lt;/span> Aug &lt;span style="color:#ae81ff">2022&lt;/span> cups
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> drwxrwxr-x - root &lt;span style="color:#ae81ff">10&lt;/span> Aug &lt;span style="color:#ae81ff">2022&lt;/span> default
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .rwxrwxr-x 18k root &lt;span style="color:#ae81ff">10&lt;/span> Aug &lt;span style="color:#ae81ff">2022&lt;/span> dhclient-script
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .rwxrwxr-x 19k root &lt;span style="color:#ae81ff">10&lt;/span> Aug &lt;span style="color:#ae81ff">2022&lt;/span> dnsmasq.conf
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .rwxrwxr-x 1.1k root &lt;span style="color:#ae81ff">10&lt;/span> Aug &lt;span style="color:#ae81ff">2022&lt;/span> ethertypes
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .rw-rw-r-- &lt;span style="color:#ae81ff">637&lt;/span> root &lt;span style="color:#ae81ff">10&lt;/span> Aug &lt;span style="color:#ae81ff">2022&lt;/span> fstab
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> lrwxrwxrwx - root &lt;span style="color:#ae81ff">10&lt;/span> Aug &lt;span style="color:#ae81ff">2022&lt;/span> group -&amp;gt; /var/group
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .rw-rw-r-- &lt;span style="color:#ae81ff">127&lt;/span> root &lt;span style="color:#ae81ff">10&lt;/span> Aug &lt;span style="color:#ae81ff">2022&lt;/span> inetd.conf
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> drwxrwxr-x - root &lt;span style="color:#ae81ff">10&lt;/span> Aug &lt;span style="color:#ae81ff">2022&lt;/span> init.d
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ vim etc/config_default.xml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;Value Name&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;SUSER_NAME&amp;#34;&lt;/span> Value&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;admin&amp;#34;&lt;/span>/&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;Value Name&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;SUSER_PASSWORD&amp;#34;&lt;/span> Value&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;HTB{N0******************1n}&amp;#34;&lt;/span>/&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ...
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>So, let&amp;rsquo;s unmount the file system since it is no longer needed and then submit the flag.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ cd ..
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ sudo umount ./fw_fs
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></content></item><item><title>Simple Encryptor Walkthrough - HackTheBox</title><link>https://favas.dev/blogs/hackthebox/challenges/reversing/simple-encryptor/</link><pubDate>Sat, 05 Oct 2024 16:25:54 +0530</pubDate><guid>https://favas.dev/blogs/hackthebox/challenges/reversing/simple-encryptor/</guid><description>&lt;p>In this article, I’ll walk you through solving the &lt;strong>Simple Encryptor&lt;/strong> reversing challenge from the platform &lt;a href="https://hackthebox.eu">HackTheBox&lt;/a>. Since I haven’t done much in the realm of CTF or any kind of cybersecurity challenges for a while, my approach might not be perfect, and there may be some incorrect assumptions along the way. If you notice anything off, feel free to reach out, and I’ll be happy to correct it.&lt;/p>
&lt;p>Please keep in mind that I’m primarily a developer with no formal experience in reverse engineering or tools like &lt;code>Ghidra&lt;/code> or &lt;code>IDA Pro&lt;/code>, and my understanding of assembly is quite limited.&lt;/p></description><content>&lt;p>In this article, I’ll walk you through solving the &lt;strong>Simple Encryptor&lt;/strong> reversing challenge from the platform &lt;a href="https://hackthebox.eu">HackTheBox&lt;/a>. Since I haven’t done much in the realm of CTF or any kind of cybersecurity challenges for a while, my approach might not be perfect, and there may be some incorrect assumptions along the way. If you notice anything off, feel free to reach out, and I’ll be happy to correct it.&lt;/p>
&lt;p>Please keep in mind that I’m primarily a developer with no formal experience in reverse engineering or tools like &lt;code>Ghidra&lt;/code> or &lt;code>IDA Pro&lt;/code>, and my understanding of assembly is quite limited.&lt;/p>
&lt;h3 id="challenge-information">Challenge Information&lt;/h3>
&lt;p>Now that we&amp;rsquo;ve set the stage, let&amp;rsquo;s dive into the challenge itself. The description provided is as follows:&lt;/p>
&lt;blockquote>
&lt;p>During one of our routine checks on the secret flag storage server, we discovered it had been hit by ransomware! The original flag data is gone, but luckily, we still have both the encrypted file and the encryption program itself.&lt;/p>
&lt;/blockquote>
&lt;p>Next, let&amp;rsquo;s download the challenge files. There&amp;rsquo;s only one file, &lt;strong>Simple Encryptor.zip&lt;/strong>. After extracting it with:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>unzip &lt;span style="color:#e6db74">&amp;#39;Simple Encryptor.zip&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>We find a directory called &lt;strong>rev_simpleencryptor&lt;/strong>, containing two files: an encrypted flag file named &lt;em>flag.enc&lt;/em> and an executable binary named &lt;em>encrypt&lt;/em>.&lt;/p>
&lt;p>To start analyzing the binary, I decided to load it into GDB to get a better sense of what’s happening. I navigated to the &lt;strong>rev_simpleencryptor&lt;/strong> directory and opened the binary in GDB with:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>gdb encrypt
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Since GDB uses AT&amp;amp;T assembly syntax by default, I switched it to Intel format by running:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>set disassembly-flavor intel
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Next, I began the disassembly process with:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>disass main
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Here’s the initial output:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-asm" data-lang="asm">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">0&lt;/span>&lt;span style="color:#a6e22e">x0000000000001289&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">&amp;lt;+&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&amp;gt;&lt;/span>: &lt;span style="color:#66d9ef">endbr64&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">0&lt;/span>&lt;span style="color:#a6e22e">x000000000000128d&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">&amp;lt;+&lt;/span>&lt;span style="color:#ae81ff">4&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&amp;gt;&lt;/span>: &lt;span style="color:#66d9ef">push&lt;/span> &lt;span style="color:#66d9ef">rbp&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">0&lt;/span>&lt;span style="color:#a6e22e">x000000000000128e&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">&amp;lt;+&lt;/span>&lt;span style="color:#ae81ff">5&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&amp;gt;&lt;/span>: &lt;span style="color:#66d9ef">mov&lt;/span> &lt;span style="color:#66d9ef">rbp&lt;/span>,&lt;span style="color:#66d9ef">rsp&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">0&lt;/span>&lt;span style="color:#a6e22e">x0000000000001291&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">&amp;lt;+&lt;/span>&lt;span style="color:#ae81ff">8&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&amp;gt;&lt;/span>: &lt;span style="color:#66d9ef">sub&lt;/span> &lt;span style="color:#66d9ef">rsp&lt;/span>,&lt;span style="color:#ae81ff">0x40&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">0&lt;/span>&lt;span style="color:#a6e22e">x0000000000001295&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">&amp;lt;+&lt;/span>&lt;span style="color:#ae81ff">12&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&amp;gt;&lt;/span>: &lt;span style="color:#66d9ef">mov&lt;/span> &lt;span style="color:#66d9ef">rax&lt;/span>,&lt;span style="color:#66d9ef">QWORD&lt;/span> &lt;span style="color:#66d9ef">PTR&lt;/span> &lt;span style="color:#66d9ef">fs&lt;/span>:&lt;span style="color:#ae81ff">0x28&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">0&lt;/span>&lt;span style="color:#a6e22e">x000000000000129e&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">&amp;lt;+&lt;/span>&lt;span style="color:#ae81ff">21&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&amp;gt;&lt;/span>: &lt;span style="color:#66d9ef">mov&lt;/span> &lt;span style="color:#66d9ef">QWORD&lt;/span> &lt;span style="color:#66d9ef">PTR&lt;/span> [&lt;span style="color:#66d9ef">rbp-0x8&lt;/span>],&lt;span style="color:#66d9ef">rax&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">0&lt;/span>&lt;span style="color:#a6e22e">x00000000000012a2&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">&amp;lt;+&lt;/span>&lt;span style="color:#ae81ff">25&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&amp;gt;&lt;/span>: &lt;span style="color:#66d9ef">xor&lt;/span> &lt;span style="color:#66d9ef">eax&lt;/span>,&lt;span style="color:#66d9ef">eax&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">0&lt;/span>&lt;span style="color:#a6e22e">x00000000000012a4&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">&amp;lt;+&lt;/span>&lt;span style="color:#ae81ff">27&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&amp;gt;&lt;/span>: &lt;span style="color:#66d9ef">lea&lt;/span> &lt;span style="color:#66d9ef">rsi&lt;/span>,[&lt;span style="color:#66d9ef">rip&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">+&lt;/span>&lt;span style="color:#ae81ff">0xd59&lt;/span>] &lt;span style="color:#75715e"># 0x2004
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">0&lt;/span>&lt;span style="color:#a6e22e">x00000000000012ab&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">&amp;lt;+&lt;/span>&lt;span style="color:#ae81ff">34&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&amp;gt;&lt;/span>: &lt;span style="color:#66d9ef">lea&lt;/span> &lt;span style="color:#66d9ef">rdi&lt;/span>,[&lt;span style="color:#66d9ef">rip&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">+&lt;/span>&lt;span style="color:#ae81ff">0xd55&lt;/span>] &lt;span style="color:#75715e"># 0x2007
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">0&lt;/span>&lt;span style="color:#a6e22e">x00000000000012b2&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">&amp;lt;+&lt;/span>&lt;span style="color:#ae81ff">41&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&amp;gt;&lt;/span>: &lt;span style="color:#66d9ef">call&lt;/span> &lt;span style="color:#ae81ff">0x1170&lt;/span> &amp;lt;&lt;span style="color:#66d9ef">fopen@plt&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">0&lt;/span>&lt;span style="color:#a6e22e">x00000000000012b7&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">&amp;lt;+&lt;/span>&lt;span style="color:#ae81ff">46&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&amp;gt;&lt;/span>: &lt;span style="color:#66d9ef">mov&lt;/span> &lt;span style="color:#66d9ef">QWORD&lt;/span> &lt;span style="color:#66d9ef">PTR&lt;/span> [&lt;span style="color:#66d9ef">rbp-0x28&lt;/span>],&lt;span style="color:#66d9ef">rax&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">0&lt;/span>&lt;span style="color:#a6e22e">x00000000000012bb&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">&amp;lt;+&lt;/span>&lt;span style="color:#ae81ff">50&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&amp;gt;&lt;/span>: &lt;span style="color:#66d9ef">mov&lt;/span> &lt;span style="color:#66d9ef">rax&lt;/span>,&lt;span style="color:#66d9ef">QWORD&lt;/span> &lt;span style="color:#66d9ef">PTR&lt;/span> [&lt;span style="color:#66d9ef">rbp-0x28&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">0&lt;/span>&lt;span style="color:#a6e22e">x00000000000012bf&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">&amp;lt;+&lt;/span>&lt;span style="color:#ae81ff">54&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&amp;gt;&lt;/span>: &lt;span style="color:#66d9ef">mov&lt;/span> &lt;span style="color:#66d9ef">edx&lt;/span>,&lt;span style="color:#ae81ff">0x2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">0&lt;/span>&lt;span style="color:#a6e22e">x00000000000012c4&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">&amp;lt;+&lt;/span>&lt;span style="color:#ae81ff">59&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&amp;gt;&lt;/span>: &lt;span style="color:#66d9ef">mov&lt;/span> &lt;span style="color:#66d9ef">esi&lt;/span>,&lt;span style="color:#ae81ff">0x0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">0&lt;/span>&lt;span style="color:#a6e22e">x00000000000012c9&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">&amp;lt;+&lt;/span>&lt;span style="color:#ae81ff">64&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&amp;gt;&lt;/span>: &lt;span style="color:#66d9ef">mov&lt;/span> &lt;span style="color:#66d9ef">rdi&lt;/span>,&lt;span style="color:#66d9ef">rax&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">0&lt;/span>&lt;span style="color:#a6e22e">x00000000000012cc&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">&amp;lt;+&lt;/span>&lt;span style="color:#ae81ff">67&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&amp;gt;&lt;/span>: &lt;span style="color:#66d9ef">call&lt;/span> &lt;span style="color:#ae81ff">0x1160&lt;/span> &amp;lt;&lt;span style="color:#66d9ef">fseek@plt&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">0&lt;/span>&lt;span style="color:#a6e22e">x00000000000012d1&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">&amp;lt;+&lt;/span>&lt;span style="color:#ae81ff">72&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&amp;gt;&lt;/span>: &lt;span style="color:#66d9ef">mov&lt;/span> &lt;span style="color:#66d9ef">rax&lt;/span>,&lt;span style="color:#66d9ef">QWORD&lt;/span> &lt;span style="color:#66d9ef">PTR&lt;/span> [&lt;span style="color:#66d9ef">rbp-0x28&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">0&lt;/span>&lt;span style="color:#a6e22e">x00000000000012d5&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">&amp;lt;+&lt;/span>&lt;span style="color:#ae81ff">76&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&amp;gt;&lt;/span>: &lt;span style="color:#66d9ef">mov&lt;/span> &lt;span style="color:#66d9ef">rdi&lt;/span>,&lt;span style="color:#66d9ef">rax&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">0&lt;/span>&lt;span style="color:#a6e22e">x00000000000012d8&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">&amp;lt;+&lt;/span>&lt;span style="color:#ae81ff">79&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&amp;gt;&lt;/span>: &lt;span style="color:#66d9ef">call&lt;/span> &lt;span style="color:#ae81ff">0x1130&lt;/span> &amp;lt;&lt;span style="color:#66d9ef">ftell@plt&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">0&lt;/span>&lt;span style="color:#a6e22e">x00000000000012dd&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">&amp;lt;+&lt;/span>&lt;span style="color:#ae81ff">84&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&amp;gt;&lt;/span>: &lt;span style="color:#66d9ef">mov&lt;/span> &lt;span style="color:#66d9ef">QWORD&lt;/span> &lt;span style="color:#66d9ef">PTR&lt;/span> [&lt;span style="color:#66d9ef">rbp-0x20&lt;/span>],&lt;span style="color:#66d9ef">rax&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">0&lt;/span>&lt;span style="color:#a6e22e">x00000000000012e1&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">&amp;lt;+&lt;/span>&lt;span style="color:#ae81ff">88&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&amp;gt;&lt;/span>: &lt;span style="color:#66d9ef">mov&lt;/span> &lt;span style="color:#66d9ef">rax&lt;/span>,&lt;span style="color:#66d9ef">QWORD&lt;/span> &lt;span style="color:#66d9ef">PTR&lt;/span> [&lt;span style="color:#66d9ef">rbp-0x28&lt;/span>]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now, if I’m being honest, I don’t have much experience with assembly, and I quickly realized that solving this challenge purely by reading the assembly code wasn’t going to work. However, if we look closely, we can spot a few familiar function calls like &lt;code>fopen&lt;/code>, &lt;code>fseek&lt;/code>, and &lt;code>ftell&lt;/code>. I recognized these functions from &lt;strong>&lt;code>libc&lt;/code>&lt;/strong>, the standard C library.&lt;/p>
&lt;p>Instead of trying to interpret the assembly line by line, I decided to go the decompilation route. While we can’t get the exact original source code from a binary, tools like &lt;code>Ghidra&lt;/code> and &lt;code>IDA Pro&lt;/code> can generate a fairly accurate approximation of the C code from the assembly.&lt;/p>
&lt;p>So, I installed &lt;code>Ghidra&lt;/code> on my machine, created a new project, and loaded the &lt;em>encrypt&lt;/em> binary. After some analysis, Ghidra produced a decompiled version of the binary, which looked like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>undefined8 &lt;span style="color:#a6e22e">main&lt;/span>(&lt;span style="color:#66d9ef">void&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> iVar1;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">time_t&lt;/span> tVar2;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">long&lt;/span> in_FS_OFFSET;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> uint local_40;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> uint local_3c;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">long&lt;/span> local_38;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> FILE &lt;span style="color:#f92672">*&lt;/span>local_30;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">size_t&lt;/span> local_28;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#f92672">*&lt;/span>local_20;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> FILE &lt;span style="color:#f92672">*&lt;/span>local_18;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">long&lt;/span> local_10;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> local_10 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">*&lt;/span>(&lt;span style="color:#66d9ef">long&lt;/span> &lt;span style="color:#f92672">*&lt;/span>)(in_FS_OFFSET &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">0x28&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> local_30 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">fopen&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;flag&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;rb&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fseek&lt;/span>(local_30,&lt;span style="color:#ae81ff">0&lt;/span>,&lt;span style="color:#ae81ff">2&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> local_28 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">ftell&lt;/span>(local_30);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fseek&lt;/span>(local_30,&lt;span style="color:#ae81ff">0&lt;/span>,&lt;span style="color:#ae81ff">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> local_20 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">malloc&lt;/span>(local_28);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fread&lt;/span>(local_20,local_28,&lt;span style="color:#ae81ff">1&lt;/span>,local_30);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fclose&lt;/span>(local_30);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tVar2 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">time&lt;/span>((&lt;span style="color:#66d9ef">time_t&lt;/span> &lt;span style="color:#f92672">*&lt;/span>)&lt;span style="color:#ae81ff">0x0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> local_40 &lt;span style="color:#f92672">=&lt;/span> (uint)tVar2;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">srand&lt;/span>(local_40);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> (local_38 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; local_38 &lt;span style="color:#f92672">&amp;lt;&lt;/span> (&lt;span style="color:#66d9ef">long&lt;/span>)local_28; local_38 &lt;span style="color:#f92672">=&lt;/span> local_38 &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> iVar1 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">rand&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">*&lt;/span>(byte &lt;span style="color:#f92672">*&lt;/span>)((&lt;span style="color:#66d9ef">long&lt;/span>)local_20 &lt;span style="color:#f92672">+&lt;/span> local_38) &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">*&lt;/span>(byte &lt;span style="color:#f92672">*&lt;/span>)((&lt;span style="color:#66d9ef">long&lt;/span>)local_20 &lt;span style="color:#f92672">+&lt;/span> local_38) &lt;span style="color:#f92672">^&lt;/span> (byte)iVar1;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> local_3c &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">rand&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> local_3c &lt;span style="color:#f92672">=&lt;/span> local_3c &lt;span style="color:#f92672">&amp;amp;&lt;/span> &lt;span style="color:#ae81ff">7&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">*&lt;/span>(byte &lt;span style="color:#f92672">*&lt;/span>)((&lt;span style="color:#66d9ef">long&lt;/span>)local_20 &lt;span style="color:#f92672">+&lt;/span> local_38) &lt;span style="color:#f92672">=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">*&lt;/span>(byte &lt;span style="color:#f92672">*&lt;/span>)((&lt;span style="color:#66d9ef">long&lt;/span>)local_20 &lt;span style="color:#f92672">+&lt;/span> local_38) &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> (sbyte)local_3c &lt;span style="color:#f92672">|&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">*&lt;/span>(byte &lt;span style="color:#f92672">*&lt;/span>)((&lt;span style="color:#66d9ef">long&lt;/span>)local_20 &lt;span style="color:#f92672">+&lt;/span> local_38) &lt;span style="color:#f92672">&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#ae81ff">8&lt;/span> &lt;span style="color:#f92672">-&lt;/span> (sbyte)local_3c;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> local_18 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">fopen&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;flag.enc&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;wb&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fwrite&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>local_40,&lt;span style="color:#ae81ff">1&lt;/span>,&lt;span style="color:#ae81ff">4&lt;/span>,local_18);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fwrite&lt;/span>(local_20,&lt;span style="color:#ae81ff">1&lt;/span>,local_28,local_18);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fclose&lt;/span>(local_18);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (local_10 &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#f92672">*&lt;/span>(&lt;span style="color:#66d9ef">long&lt;/span> &lt;span style="color:#f92672">*&lt;/span>)(in_FS_OFFSET &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">0x28&lt;/span>)) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">/* WARNING: Subroutine does not return */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">__stack_chk_fail&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="code-explanation">Code Explanation&lt;/h3>
&lt;blockquote>
&lt;p>DISCLAIMER: I will be explaining the code in-depth, so if you already understand what&amp;rsquo;s going on, feel free to skip this section.&lt;/p>
&lt;/blockquote>
&lt;p>Let&amp;rsquo;s observe the decompiled code closely and try to rename variables and types based on context while trying to understand how this binary encrypts data. On the first line, we have &lt;code>undefined8 main(void)&lt;/code>, and at the end, we return &amp;lsquo;0&amp;rsquo;, which means &lt;code>undefined8&lt;/code> could be any kind of &lt;code>int&lt;/code> type. Let&amp;rsquo;s assume it is, in fact, &lt;code>int&lt;/code>. This is how we are trying to understand the decompiled code.&lt;/p>
&lt;p>Let&amp;rsquo;s explore what the code does:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span> local_30 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">fopen&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;flag&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;rb&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fseek&lt;/span>(local_30,&lt;span style="color:#ae81ff">0&lt;/span>,&lt;span style="color:#ae81ff">2&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> local_28 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">ftell&lt;/span>(local_30);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fseek&lt;/span>(local_30,&lt;span style="color:#ae81ff">0&lt;/span>,&lt;span style="color:#ae81ff">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> local_20 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">malloc&lt;/span>(local_28);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fread&lt;/span>(local_20,local_28,&lt;span style="color:#ae81ff">1&lt;/span>,local_30);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fclose&lt;/span>(local_30);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In this block, the application initially opens a file handler to the original file called &lt;code>flag&lt;/code> in read mode. Then, it moves the file pointer to the end of the file using the &lt;code>fseek()&lt;/code> function. The &lt;code>fseek()&lt;/code> function essentially accepts three arguments: a file pointer, an offset, and the position to which the file should move. The position can either be &lt;code>SEEK_SET&lt;/code> (which translates to 0), &lt;code>SEEK_CUR&lt;/code> (which translates to 1), or &lt;code>SEEK_END&lt;/code> (which translates to 2). The offset can be a positive or negative integer, meaning how many bytes we should deviate from the position. If we closely observe the code, we can see that here, the pointer is moved to the end of the file with a 0 offset, meaning no deviation, so we stay at the end of the file.&lt;/p>
&lt;p>Then, we call the &lt;code>ftell()&lt;/code> function, which accepts a file pointer and returns the current position as a &lt;code>size_t&lt;/code> or &lt;code>long&lt;/code>. These lines are used to calculate the file size. After that, the file pointer is moved back to the start of the file with a 0 offset by calling &lt;code>fseek(file_ptr, 0, 0)&lt;/code>. Next, we allocate some memory in the heap to store the file content and store the returned pointer in a variable. This can be seen as a temporary buffer. The application then reads the file content into the buffer by calling &lt;code>fread(buffer, file_size, number_of_chunks_to_read, file_ptr)&lt;/code>. Once all the contents are read into the buffer, it closes the file handle.&lt;/p>
&lt;p>So with this knowledge, we can convert our decompiled code into something more readable,&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span> FILE &lt;span style="color:#f92672">*&lt;/span>file_ptr &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">fopen&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;flag&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;rb&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fseek&lt;/span>(file_ptr, &lt;span style="color:#ae81ff">0&lt;/span>, SEEK_END);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">long&lt;/span> file_size &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">ftell&lt;/span>(file_ptr);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fseek&lt;/span>(file_ptr, &lt;span style="color:#ae81ff">0&lt;/span>, SEEK_SET);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#f92672">*&lt;/span>buffer &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">malloc&lt;/span>(file_size);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fread&lt;/span>(buffer, file_size, &lt;span style="color:#ae81ff">1&lt;/span>, file_ptr);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fclose&lt;/span>(file_ptr);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now, let&amp;rsquo;s move to the actual encryption part:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span> tVar2 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">time&lt;/span>((&lt;span style="color:#66d9ef">time_t&lt;/span> &lt;span style="color:#f92672">*&lt;/span>)&lt;span style="color:#ae81ff">0x0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> local_40 &lt;span style="color:#f92672">=&lt;/span> (uint)tVar2;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">srand&lt;/span>(local_40);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> (local_38 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; local_38 &lt;span style="color:#f92672">&amp;lt;&lt;/span> (&lt;span style="color:#66d9ef">long&lt;/span>)local_28; local_38 &lt;span style="color:#f92672">=&lt;/span> local_38 &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> iVar1 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">rand&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">*&lt;/span>(byte &lt;span style="color:#f92672">*&lt;/span>)((&lt;span style="color:#66d9ef">long&lt;/span>)local_20 &lt;span style="color:#f92672">+&lt;/span> local_38) &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">*&lt;/span>(byte &lt;span style="color:#f92672">*&lt;/span>)((&lt;span style="color:#66d9ef">long&lt;/span>)local_20 &lt;span style="color:#f92672">+&lt;/span> local_38) &lt;span style="color:#f92672">^&lt;/span> (byte)iVar1;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> local_3c &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">rand&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> local_3c &lt;span style="color:#f92672">=&lt;/span> local_3c &lt;span style="color:#f92672">&amp;amp;&lt;/span> &lt;span style="color:#ae81ff">7&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">*&lt;/span>(byte &lt;span style="color:#f92672">*&lt;/span>)((&lt;span style="color:#66d9ef">long&lt;/span>)local_20 &lt;span style="color:#f92672">+&lt;/span> local_38) &lt;span style="color:#f92672">=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">*&lt;/span>(byte &lt;span style="color:#f92672">*&lt;/span>)((&lt;span style="color:#66d9ef">long&lt;/span>)local_20 &lt;span style="color:#f92672">+&lt;/span> local_38) &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> (sbyte)local_3c &lt;span style="color:#f92672">|&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">*&lt;/span>(byte &lt;span style="color:#f92672">*&lt;/span>)((&lt;span style="color:#66d9ef">long&lt;/span>)local_20 &lt;span style="color:#f92672">+&lt;/span> local_38) &lt;span style="color:#f92672">&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#ae81ff">8&lt;/span> &lt;span style="color:#f92672">-&lt;/span> (sbyte)local_3c;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>First, we get the current time and store it in a variable, which we then convert to a &lt;code>uint&lt;/code>. This essentially gives us the number of seconds since the Unix epoch. We&amp;rsquo;re doing this to generate a unique seed value. But why do we need a unique seed value? Let&amp;rsquo;s dive into that first by understanding how random number generation (RNG) works on a computer. Despite the name, computers can’t truly generate random numbers. This means if we know the starting point (the seed), we can reproduce the same sequence of &amp;ldquo;random&amp;rdquo; numbers, making them not truly random. To fix this, we change the starting point to something unique that only we know—like the exact current time. That&amp;rsquo;s why the program generates a unique value based on the current time, down to the second, as the seed. Without this seed value, we wouldn&amp;rsquo;t be able to reproduce the same random numbers. Now that we understand RNG and the need for a unique seed, let&amp;rsquo;s continue.&lt;/p>
&lt;p>After getting the seed number, we call the &lt;code>srand()&lt;/code> function to seed the &lt;code>rand()&lt;/code> function. Then, we loop through every byte of the buffer and manipulate it to perform encryption. Let’s break down how the bytes are being manipulated. Inside the loop, we first generate a random value using &lt;code>rand()&lt;/code>. Then, we perform an &lt;code>XOR&lt;/code> operation on the byte. Luckily for us, &lt;code>XOR&lt;/code> operations can be reversed if we know the random number used for the &lt;code>XOR&lt;/code> by performing the same operation again.&lt;/p>
&lt;p>After that, we generate another random number using &lt;code>rand()&lt;/code> and perform a logical &lt;code>AND&lt;/code> operation with 7. This ensures that the number will always be between 0 and 7, regardless of the original value. Now that we have our random number, we perform a left shift operation on the byte using this number. Next, we perform a right shift operation on the same byte. We now have two versions of the byte (shifted in opposite directions). Finally, we combine these two values with a logical &lt;code>OR&lt;/code> operation and store the result as the final encrypted byte in the buffer. This is the most interesting and important part of the encryption process. We repeat this for every byte in the buffer, meaning we encrypt the entire file&amp;rsquo;s contents. The whole process can be reversed, assuming we know the initial seed value.&lt;/p>
&lt;p>Let’s rewrite that block of code in a more readable format:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> current_time &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">time&lt;/span>(NULL);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> uint seed_number &lt;span style="color:#f92672">=&lt;/span> (uint)current_time;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">srand&lt;/span>(seed_number);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">int&lt;/span> i &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; i &lt;span style="color:#f92672">&amp;lt;&lt;/span> file_size; i&lt;span style="color:#f92672">++&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> rand_num_xor &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">rand&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> buffer[i] &lt;span style="color:#f92672">=&lt;/span> buffer[i] &lt;span style="color:#f92672">^&lt;/span> rand_num_xor;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> rand_num_bitshift &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">rand&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> rand_num_bitshift &lt;span style="color:#f92672">=&lt;/span> rand_num_bitshift &lt;span style="color:#f92672">&amp;amp;&lt;/span> &lt;span style="color:#ae81ff">7&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> buffer[i] &lt;span style="color:#f92672">=&lt;/span> (buffer[i] &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> rand_num_bitshift) &lt;span style="color:#f92672">|&lt;/span> (buffer[i] &lt;span style="color:#f92672">&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#ae81ff">8&lt;/span> &lt;span style="color:#f92672">-&lt;/span> rand_num_bitshift);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Much better, right? Let&amp;rsquo;s move on to the next code block:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span> local_18 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">fopen&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;flag.enc&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;wb&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fwrite&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>local_40,&lt;span style="color:#ae81ff">1&lt;/span>,&lt;span style="color:#ae81ff">4&lt;/span>,local_18);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fwrite&lt;/span>(local_20,&lt;span style="color:#ae81ff">1&lt;/span>,local_28,local_18);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fclose&lt;/span>(local_18);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>First, it opens a file handler for &lt;code>flag.enc&lt;/code> where the encrypted content will be written, using &amp;ldquo;write binary&amp;rdquo; mode. And since we’re lucky, the program writes the unique seed number as the first 4 bytes in the encrypted file, followed by the encrypted buffer contents. It then closes the file handle since it&amp;rsquo;s no longer needed. Let’s make this code a bit more readable too.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span> FILE &lt;span style="color:#f92672">*&lt;/span>encrypted_fp &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">fopen&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;flag.enc&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;wb&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fwrite&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>seed_number, &lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#ae81ff">4&lt;/span>, encrypted_fp);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fwrite&lt;/span>(buffer, &lt;span style="color:#ae81ff">1&lt;/span>, file_size, encrypted_fp);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fclose&lt;/span>(encrypted_fp);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>More readable than our initial decompiled code, right? Now, let&amp;rsquo;s build an algorithm to reverse this process and retrieve the actual flag!&lt;/p>
&lt;h3 id="solution">Solution&lt;/h3>
&lt;p>Before diving into the code for the final solution, let&amp;rsquo;s first create an algorithm to reverse the encryption process to understand the flow.&lt;/p>
&lt;h4 id="algorithm">Algorithm&lt;/h4>
&lt;ol>
&lt;li>Open the encrypted file.&lt;/li>
&lt;li>Read the first 4 bytes as the seed value and store it in a variable for later use.&lt;/li>
&lt;li>Get the file size, subtracting 4 bytes (the size of the seed value), as we don&amp;rsquo;t need the seed in the encrypted data.&lt;/li>
&lt;li>Allocate a temporary buffer for storing the encrypted file content using &lt;code>malloc(file_size)&lt;/code>, and store the returned pointer in the buffer variable.&lt;/li>
&lt;li>Seed the &lt;code>rand()&lt;/code> function with &lt;code>srand(seed_value)&lt;/code>.&lt;/li>
&lt;li>Start a loop to decrypt the encrypted data.&lt;/li>
&lt;li>Generate two random values using &lt;code>rand()&lt;/code>: the first for reversing the &lt;code>XOR&lt;/code>, and the second for bit shifting.&lt;/li>
&lt;li>Perform bit shifting in reverse: first a right shift, then a left shift. After that, perform a logical OR operation and overwrite the buffer content at the current index.&lt;/li>
&lt;li>Finally, perform the &lt;code>XOR&lt;/code> operation again and overwrite the buffer content at the current index.&lt;/li>
&lt;li>Repeat this for all contents and print the buffer.&lt;/li>
&lt;/ol>
&lt;h4 id="code">Code&lt;/h4>
&lt;p>Now, let&amp;rsquo;s write the code. Since we were working with &lt;code>C&lt;/code> all this time, we&amp;rsquo;ll implement the solution in &lt;code>C&lt;/code> for consistency with the functions we&amp;rsquo;ve been using.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;stdint.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;stdlib.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Open encrypted file
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> FILE &lt;span style="color:#f92672">*&lt;/span>fp &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">fopen&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;flag.enc&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;rb&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Read seed value
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">uint32_t&lt;/span> seed;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fread&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>seed, &lt;span style="color:#66d9ef">sizeof&lt;/span>(seed), &lt;span style="color:#ae81ff">1&lt;/span>, fp);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Get file_size - seed value size (4 bytes) and allocate memory
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">fseek&lt;/span>(fp, &lt;span style="color:#ae81ff">0&lt;/span>, SEEK_END);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">long&lt;/span> file_size &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">ftell&lt;/span>(fp) &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#66d9ef">sizeof&lt;/span>(seed);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">uint8_t&lt;/span> &lt;span style="color:#f92672">*&lt;/span>buffer &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">malloc&lt;/span>(file_size);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Read encrypted file content to buffer
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">fseek&lt;/span>(fp, &lt;span style="color:#66d9ef">sizeof&lt;/span>(seed), SEEK_SET);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fread&lt;/span>(buffer, &lt;span style="color:#ae81ff">1&lt;/span>, file_size, fp);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fclose&lt;/span>(fp);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Set seed value for rand()
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">srand&lt;/span>(seed);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">int&lt;/span> i &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; i &lt;span style="color:#f92672">&amp;lt;&lt;/span> file_size; i&lt;span style="color:#f92672">++&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// generate random numbers like encrypt binary
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> rand_num_xor &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">rand&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> rand_num_bitshift &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">rand&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> shift_num &lt;span style="color:#f92672">=&lt;/span> rand_num_bitshift &lt;span style="color:#f92672">&amp;amp;&lt;/span> &lt;span style="color:#ae81ff">7&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Reverse bit shifting and xor
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> buffer[i] &lt;span style="color:#f92672">=&lt;/span> (buffer[i] &lt;span style="color:#f92672">&amp;gt;&amp;gt;&lt;/span> shift_num) &lt;span style="color:#f92672">|&lt;/span> (buffer[i] &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> (&lt;span style="color:#ae81ff">8&lt;/span> &lt;span style="color:#f92672">-&lt;/span> shift_num));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> buffer[i] &lt;span style="color:#f92672">=&lt;/span> buffer[i] &lt;span style="color:#f92672">^&lt;/span> rand_num_xor;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Print result
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;%s&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, buffer);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">free&lt;/span>(buffer);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now let&amp;rsquo;s compile and run the solution code:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>gcc -o decrypt decrypt.c
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>./decrypt
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This should print the flag in the format &lt;code>HTB{vRy*******************************0r}&lt;/code>.&lt;/p></content></item></channel></rss>